script
# log the status with which we left xbmc
logger -t "Kodi" "Kodi exit with exit status $EXIT_STATUS, $EXIT_SIGNAL, ENV: $(env) ."
# kill xbmc.bin ghost process
if pidof kodi.bin &> /dev/null ; then
	killall -9 kodi.bin ||:
fi
# in case we want to shutdown do it, else make sure default rate is set in all cases
case $EXIT_STATUS in
    64|66)
	<?cs if:(vdr.backend == "disabled") ?>
        poweroff
	<?cs else ?>
        echo 0 > /tmp/xbmc-active
        case "$(vdr-dbus-send /Shutdown shutdown.ConfirmShutdown boolean:true | grep -m 1 int32 | egrep -e "[[:digit:]]{3}" -o)" in 
            990|250)
                logger -t "kodi-exit.conf" "VDR ready to shutdown, sending POWER signal to VDR"
                vdr-dbus-send /Remote remote.HitKey string:'Power' || /bin/true
                ;; 
            *)  logger -t "kodi-exit.conf" "can't shutdown, restarting XBMC"
                signal-event reset-display-rate
                /sbin/initctl emit --no-wait vdr-frontend-restart
                ;; 
        esac
	<?cs /if ?>
        ;;
    *)
        case "$(cat /tmp/xbmc-shutdown)" in 
          1)
            <?cs if:(vdr.frontend == "xbmc") ?>
                vdr-dbus-send /Remote remote.HitKey string:'Power' || /bin/true
            <?cs else ?>
	        signal-event reset-display-rate
                /sbin/initctl emit vdr-frontend-restart
                sleep 5
                vdr-dbus-send /Remote remote.HitKey string:'Power' || /bin/true
            <?cs /if ?>
            ;;
          *)
	    signal-event reset-display-rate
            /sbin/initctl emit --no-wait vdr-frontend-restart
            ;;
        esac
        ;;
esac

#clean up
rm -f /tmp/xbmc-active
rm -f /tmp/xbmc-shutdown
end script
